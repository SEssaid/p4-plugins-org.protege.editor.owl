/* Generated By:JavaCC: Do not edit this line. ManchesterOWLParserTokenManager.java */
package org.protege.editor.owl.model.description.manchester;
import java.io.Reader;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.net.URI;
import org.protege.editor.owl.model.description.*;
import org.semanticweb.owl.vocab.XSDVocabulary;
import org.semanticweb.owl.vocab.OWLRestrictedDataRangeFacetVocabulary;
import static org.semanticweb.owl.vocab.OWLRestrictedDataRangeFacetVocabulary.*;
import org.semanticweb.owl.model.*;

public class ManchesterOWLParserTokenManager implements ManchesterOWLParserConstants
{
    private EntityMapper entityMapper;

    private DataTypeMapper dataTypeMapper;

    private IdentifierKindExtractor extractor = new IdentifierKindExtractor();

    public void setEntityMapper(EntityMapper entityMapper) {
        this.entityMapper = entityMapper;
    }

    public void setDataTypeMapper(DataTypeMapper dataTypeMapper) {
        this.dataTypeMapper = dataTypeMapper;
    }


    private class IdentifierKindExtractor implements OWLEntityVisitor {

        private int kind;

        public int getKind() {
            return kind;
        }

        public void visit(OWLDataProperty owlDataProperty) {
            kind = ManchesterOWLParserConstants.DATAPROPID;
        }

        public void visit(OWLObjectProperty owlObjectProperty) {
            kind = ManchesterOWLParserConstants.OBJECTPROPID;
        }

        public void visit(OWLIndividual owlIndividual) {
           kind = ManchesterOWLParserConstants.INDIVIDUALID;
        }

        public void visit(OWLAnonymousIndividual individual) {
            kind = ManchesterOWLParserConstants.IDENTIFIER;
        }

        public void visit(OWLClass owlClass) {
            kind = ManchesterOWLParserConstants.CLASSID;
        }

        public void visit(OWLDataType dataType) {
            kind = ManchesterOWLParserConstants.DATATYPEID;
        }
    }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3c00000018L) != 0L)
            return 55;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 45;
            return 11;
         }
         if ((active0 & 0x2000L) != 0L)
            return 56;
         if ((active0 & 0x2048000L) != 0L)
            return 57;
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 45;
            return 55;
         }
         if ((active0 & 0xc3fc7b4000L) != 0L)
         {
            jjmatchedKind = 45;
            return 57;
         }
         return -1;
      case 1:
         if ((active0 & 0x42800000000L) != 0L)
            return 55;
         if ((active0 & 0xc3fcff4000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
            return 57;
         }
         if ((active0 & 0x8000L) != 0L)
            return 57;
         return -1;
      case 2:
         if ((active0 & 0xc17cce0000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 2;
            }
            return 57;
         }
         if ((active0 & 0x280314000L) != 0L)
            return 57;
         return -1;
      case 3:
         if ((active0 & 0xc1dc480000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
            return 57;
         }
         if ((active0 & 0x20860000L) != 0L)
            return 57;
         return -1;
      case 4:
         if ((active0 & 0xc11c400000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
            return 57;
         }
         if ((active0 & 0xc0080000L) != 0L)
            return 57;
         return -1;
      case 5:
         if ((active0 & 0x8000000000L) != 0L)
            return 57;
         if ((active0 & 0x411c400000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
            return 57;
         }
         return -1;
      case 6:
         if ((active0 & 0x11c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
            return 57;
         }
         if ((active0 & 0x4000400000L) != 0L)
            return 57;
         return -1;
      case 7:
         if ((active0 & 0x1c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
            return 57;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 57;
         return -1;
      case 8:
         if ((active0 & 0x1c000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 8;
            return 57;
         }
         return -1;
      case 9:
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
            return 57;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 57;
         return -1;
      case 10:
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
            return 57;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 34:
         return jjStartNfaWithStates_0(0, 13, 56);
      case 40:
         return jjStopAtPos(0, 5);
      case 41:
         return jjStopAtPos(0, 6);
      case 44:
         return jjStopAtPos(0, 24);
      case 60:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 62:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 63:
         return jjStopAtPos(0, 9);
      case 91:
         return jjStopAtPos(0, 7);
      case 93:
         return jjStopAtPos(0, 8);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8400000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80300000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 111:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x48000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4120000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4020000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 123:
         return jjStopAtPos(0, 11);
      case 125:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 61:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 55);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 55);
         break;
      case 94:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 55);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000280000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x90100000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x240044000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100030000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 57);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 57);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x110000000L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 57);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000L);
      case 118:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 57);
         break;
      case 120:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 57);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80080000L);
      case 121:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 57);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 57);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 57);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000400000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 57);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x108000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 57);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 57);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 28, 57);
         break;
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x40000L, 0x0L
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  break;
               case 56:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 11:
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(34);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(33);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(32);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(31);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(30);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(29);
                  }
                  break;
               case 57:
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(34);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(33);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(32);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(31);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(30);
                  }
                  if ((0x7ff280000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(29);
                  }
                  break;
               case 1:
                  if ((0x7fffecfefffff9ffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddStates(6, 10);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(11, 16);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(24, 26);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 62 && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(17, 19);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(6, 10);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar != 46)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(20, 22);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(20, 22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 3);
                  break;
               case 23:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(24, 26);
                  break;
               case 24:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 34 && kind > 44)
                     kind = 44;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 29:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x7ff280000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 16);
                  break;
               case 36:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 39 && kind > 45)
                     kind = 45;
                  break;
               case 38:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 39 && kind > 46)
                     kind = 46;
                  break;
               case 40:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 39 && kind > 47)
                     kind = 47;
                  break;
               case 42:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 39 && kind > 48)
                     kind = 48;
                  break;
               case 44:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 39 && kind > 49)
                     kind = 49;
                  break;
               case 46:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar == 39 && kind > 50)
                     kind = 50;
                  break;
               case 48:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(0, 5);
                  break;
               case 49:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x7fffecfefffff9ffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  break;
               case 56:
                  jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  break;
               case 11:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(33);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 57:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(33);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(32);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(30);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(29);
                  }
                  break;
               case 1:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(23, 28);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 5:
                  if (curChar == 101)
                     jjAddStates(29, 30);
                  break;
               case 8:
                  if ((0x104000000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 9:
                  if (curChar == 101 && kind > 43)
                     kind = 43;
                  break;
               case 10:
                  if (curChar == 117)
                     jjCheckNAdd(9);
                  break;
               case 12:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 115)
                     jjCheckNAdd(9);
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 24:
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(23, 28);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(34);
                  break;
               case 36:
                  jjAddStates(31, 32);
                  break;
               case 38:
                  jjAddStates(33, 34);
                  break;
               case 40:
                  jjAddStates(35, 36);
                  break;
               case 42:
                  jjAddStates(37, 38);
                  break;
               case 44:
                  jjAddStates(39, 40);
                  break;
               case 46:
                  jjAddStates(41, 42);
                  break;
               case 48:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(0, 5);
                  break;
               case 49:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(24, 25);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  break;
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  break;
               case 57:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(49);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(50);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(51);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(52);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(53);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(54);
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddStates(0, 5);
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 36:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(31, 32);
                  break;
               case 38:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(33, 34);
                  break;
               case 40:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 36);
                  break;
               case 42:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(37, 38);
                  break;
               case 44:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 40);
                  break;
               case 46:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 42);
                  break;
               case 48:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(0, 5);
                  break;
               case 49:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   49, 50, 51, 52, 53, 54, 18, 19, 20, 22, 3, 36, 38, 40, 42, 44, 
   46, 4, 5, 8, 21, 5, 8, 29, 30, 31, 32, 33, 34, 6, 7, 36, 
   37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\50", "\51", "\133", "\135", "\77", null, "\173", 
"\175", "\42", "\141\156\144", "\157\162", "\156\157\164", "\163\157\155\145", 
"\157\156\154\171", "\166\141\154\165\145", "\155\151\156", "\155\141\170", 
"\145\170\141\143\164\154\171", "\164\150\141\164", "\54", "\157", "\163\165\142\103\154\141\163\163\117\146", 
"\145\161\165\151\166\141\154\145\156\164\124\157", "\144\151\163\152\157\151\156\164\127\151\164\150", "\160\154\165\163", 
"\165\156\151\157\156", "\155\151\156\165\163", "\160\157\163\163\151\142\154\171", "\151\156\166", 
"\76", "\76\75", "\74", "\74\75", "\160\141\164\164\145\162\156", 
"\154\145\156\147\164\150", null, null, "\136\136", null, null, null, null, null, null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x1fffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ManchesterOWLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ManchesterOWLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000400L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 52)
   {
      jjmatchedKind = 52;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 45 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        OWLEntity owlEntity = entityMapper.getOWLEntity(image.toString());
        if(owlEntity == null) {
            // Could be a data type
            URI dataTypeURI = dataTypeMapper.getOWLDataTypeURI(image.toString());
            if(dataTypeURI != null) {
                matchedToken.kind =  ManchesterOWLParserConstants.DATATYPEID;
            }
        }
        else {
                owlEntity.accept(extractor);
                matchedToken.kind = extractor.getKind();
        }
         break;
      default : 
         break;
   }
}
}
