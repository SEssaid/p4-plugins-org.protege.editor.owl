/* Generated By:JavaCC: Do not edit this line. ManchesterOWLParserTokenManager.java */
package org.protege.editor.owl.model.description.manchester;

import org.semanticweb.owl.model.*;

import java.net.URI;

public class ManchesterOWLParserTokenManager implements ManchesterOWLParserConstants {

    private EntityMapper entityMapper;

    private DataTypeMapper dataTypeMapper;

    private IdentifierKindExtractor extractor = new IdentifierKindExtractor();


    public void setEntityMapper(EntityMapper entityMapper) {
        this.entityMapper = entityMapper;
    }


    public void setDataTypeMapper(DataTypeMapper dataTypeMapper) {
        this.dataTypeMapper = dataTypeMapper;
    }


    private class IdentifierKindExtractor implements OWLEntityVisitor {

        private int kind;


        public int getKind() {
            return kind;
        }


        public void visit(OWLDataProperty owlDataProperty) {
            kind = ManchesterOWLParserConstants.DATAPROPID;
        }


        public void visit(OWLObjectProperty owlObjectProperty) {
            kind = ManchesterOWLParserConstants.OBJECTPROPID;
        }


        public void visit(OWLIndividual owlIndividual) {
            kind = ManchesterOWLParserConstants.INDIVIDUALID;
        }


        public void visit(OWLAnonymousIndividual individual) {
            kind = ManchesterOWLParserConstants.IDENTIFIER;
        }


        public void visit(OWLClass owlClass) {
            kind = ManchesterOWLParserConstants.CLASSID;
        }


        public void visit(OWLDataType dataType) {
            kind = ManchesterOWLParserConstants.DATATYPEID;
        }
    }


    public java.io.PrintStream debugStream = System.out;


    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }


    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x800L) != 0L)
                    return 52;
                if ((active0 & 0xf00000018L) != 0L)
                    return 53;
                if ((active0 & 0x812000L) != 0L)
                    return 54;
                if ((active0 & 0x10000000000L) != 0L) {
                    jjmatchedKind = 43;
                    return 53;
                }
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 43;
                    return 8;
                }
                if ((active0 & 0x30ff1ed000L) != 0L) {
                    jjmatchedKind = 43;
                    return 54;
                }
                return -1;
            case 1:
                if ((active0 & 0x30ff3fd000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 1;
                    return 54;
                }
                if ((active0 & 0x10a00000000L) != 0L)
                    return 53;
                if ((active0 & 0x2000L) != 0L)
                    return 54;
                return -1;
            case 2:
                if ((active0 & 0x305f338000L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 43;
                        jjmatchedPos = 2;
                    }
                    return 54;
                }
                if ((active0 & 0xa00c5000L) != 0L)
                    return 54;
                return -1;
            case 3:
                if ((active0 & 0x3077120000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 3;
                    return 54;
                }
                if ((active0 & 0x8218000L) != 0L)
                    return 54;
                return -1;
            case 4:
                if ((active0 & 0x3047100000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 4;
                    return 54;
                }
                if ((active0 & 0x30020000L) != 0L)
                    return 54;
                return -1;
            case 5:
                if ((active0 & 0x2000000000L) != 0L)
                    return 54;
                if ((active0 & 0x1047100000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 5;
                    return 54;
                }
                return -1;
            case 6:
                if ((active0 & 0x47000000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 6;
                    return 54;
                }
                if ((active0 & 0x1000100000L) != 0L)
                    return 54;
                return -1;
            case 7:
                if ((active0 & 0x7000000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 7;
                    return 54;
                }
                if ((active0 & 0x40000000L) != 0L)
                    return 54;
                return -1;
            case 8:
                if ((active0 & 0x7000000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 8;
                    return 54;
                }
                return -1;
            case 9:
                if ((active0 & 0x6000000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 9;
                    return 54;
                }
                if ((active0 & 0x1000000L) != 0L)
                    return 54;
                return -1;
            case 10:
                if ((active0 & 0x6000000L) != 0L) {
                    jjmatchedKind = 43;
                    jjmatchedPos = 10;
                    return 54;
                }
                return -1;
            default :
                return -1;
        }
    }


    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }


    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }


    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }


    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 13:
                jjmatchedKind = 3;
                return jjMoveStringLiteralDfa1_0(0x10L);
            case 34:
                return jjStartNfaWithStates_0(0, 11, 52);
            case 40:
                return jjStopAtPos(0, 5);
            case 41:
                return jjStopAtPos(0, 6);
            case 44:
                return jjStopAtPos(0, 22);
            case 60:
                jjmatchedKind = 34;
                return jjMoveStringLiteralDfa1_0(0x800000000L);
            case 62:
                jjmatchedKind = 32;
                return jjMoveStringLiteralDfa1_0(0x200000000L);
            case 91:
                return jjStopAtPos(0, 7);
            case 93:
                return jjStopAtPos(0, 8);
            case 94:
                return jjMoveStringLiteralDfa1_0(0x10000000000L);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x1000L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x4000000L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x2100000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x80000000L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x2000000000L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x200c0000L);
            case 110:
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 111:
                jjmatchedKind = 23;
                return jjMoveStringLiteralDfa1_0(0x12000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x1048000000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x1008000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x10000000L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x20000L);
            case 123:
                return jjStopAtPos(0, 9);
            case 125:
                return jjStopAtPos(0, 10);
            default :
                return jjMoveNfa_0(9, 0);
        }
    }


    private final int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active0 & 0x10L) != 0L)
                    return jjStopAtPos(1, 4);
                break;
            case 61:
                if ((active0 & 0x200000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 33, 53);
                else if ((active0 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 35, 53);
                break;
            case 94:
                if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 40, 53);
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000a0000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x24040000L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x90011000L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000c000L);
            case 113:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
            case 114:
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(1, 13, 54);
                break;
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0);
    }


    private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x300000L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
            case 100:
                if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(2, 12, 54);
                break;
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
            case 110:
                if ((active0 & 0x40000L) != 0L) {
                    jjmatchedKind = 18;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x2020000000L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x44000000L);
            case 116:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(2, 14, 54);
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0xa000000L);
            case 118:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 31, 54);
                break;
            case 120:
                if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(2, 19, 54);
                break;
            default :
                break;
        }
        return jjStartNfa_0(1, active0);
    }


    private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
            case 101:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(3, 15, 54);
                break;
            case 103:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
            case 106:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
            case 115:
                if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 27, 54);
                return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
            case 116:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(3, 21, 54);
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x20020000L);
            case 121:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(3, 16, 54);
                break;
            default :
                break;
        }
        return jjStartNfa_0(2, active0);
    }


    private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(4, 17, 54);
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
            case 108:
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
            case 110:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 28, 54);
                break;
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
            case 115:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 29, 54);
                break;
            case 116:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000100000L);
            case 118:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0);
    }


    private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x3000000L);
            case 98:
                return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
            case 104:
                if ((active0 & 0x2000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 37, 54);
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
            case 108:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
            default :
                break;
        }
        return jjStartNfa_0(4, active0);
    }


    private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 108:
                return jjMoveStringLiteralDfa7_0(active0, 0x42000000L);
            case 110:
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 36, 54);
                return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
            case 115:
                return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
            case 121:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(6, 20, 54);
                break;
            default :
                break;
        }
        return jjStartNfa_0(5, active0);
    }


    private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
            case 115:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
            case 116:
                return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
            case 121:
                if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 30, 54);
                break;
            default :
                break;
        }
        return jjStartNfa_0(6, active0);
    }


    private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 79:
                return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
            case 87:
                return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
            case 110:
                return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
            default :
                break;
        }
        return jjStartNfa_0(7, active0);
    }


    private final int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(7, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar) {
            case 102:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(9, 24, 54);
                break;
            case 105:
                return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
            case 116:
                return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
            default :
                break;
        }
        return jjStartNfa_0(8, active0);
    }


    private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(8, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0);
            return 10;
        }
        switch (curChar) {
            case 84:
                return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
            case 116:
                return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
            default :
                break;
        }
        return jjStartNfa_0(9, active0);
    }


    private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(9, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0);
            return 11;
        }
        switch (curChar) {
            case 104:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(11, 26, 54);
                break;
            case 111:
                if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(11, 25, 54);
                break;
            default :
                break;
        }
        return jjStartNfa_0(10, active0);
    }


    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }


    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        }
        while (start++ != end);
    }


    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }


    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++ != end);
    }


    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }


    static final long[] jjbitVec0 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};


    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 52;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 54:
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(31);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(30);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(29);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(28);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(27);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(26);
                            }
                            break;
                        case 8:
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(31);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(30);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(29);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(28);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(27);
                            }
                            if ((0x7ff280000000000L & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(26);
                            }
                            break;
                        case 52:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(21, 22);
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(23, 24);
                            break;
                        case 53:
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            break;
                        case 9:
                            if ((0xffffecfefffff9ffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAddStates(0, 5);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 38)
                                    kind = 38;
                                jjCheckNAddStates(6, 10);
                            }
                            else if (curChar == 39)
                                jjCheckNAddStates(11, 16);
                            else if (curChar == 34)
                                jjCheckNAddTwoStates(21, 23);
                            else if (curChar == 46)
                                jjCheckNAdd(1);
                            break;
                        case 0:
                            if (curChar == 46)
                                jjCheckNAdd(1);
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                            jjCheckNAddStates(17, 19);
                            break;
                        case 3:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(4);
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                            jjCheckNAddTwoStates(4, 5);
                            break;
                        case 14:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 38)
                                kind = 38;
                            jjCheckNAddStates(6, 10);
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 38)
                                kind = 38;
                            jjCheckNAdd(15);
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(16, 17);
                            break;
                        case 17:
                            if (curChar != 46)
                                break;
                            if (kind > 39)
                                kind = 39;
                            jjCheckNAddStates(20, 22);
                            break;
                        case 18:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                            jjCheckNAddStates(20, 22);
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(19, 0);
                            break;
                        case 20:
                            if (curChar == 34)
                                jjCheckNAddTwoStates(21, 23);
                            break;
                        case 21:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(21, 22);
                            break;
                        case 22:
                            if (curChar == 34 && kind > 42)
                                kind = 42;
                            break;
                        case 23:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(23, 24);
                            break;
                        case 24:
                            if (curChar == 34 && kind > 49)
                                kind = 49;
                            break;
                        case 26:
                            if ((0x7ff280000000000L & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(26);
                            break;
                        case 27:
                            if ((0x7ff280000000000L & l) == 0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                            jjCheckNAdd(27);
                            break;
                        case 28:
                            if ((0x7ff280000000000L & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            if ((0x7ff280000000000L & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAdd(29);
                            break;
                        case 30:
                            if ((0x7ff280000000000L & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(30);
                            break;
                        case 31:
                            if ((0x7ff280000000000L & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(31);
                            break;
                        case 32:
                            if (curChar == 39)
                                jjCheckNAddStates(11, 16);
                            break;
                        case 33:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(33, 34);
                            break;
                        case 34:
                            if (curChar == 39 && kind > 43)
                                kind = 43;
                            break;
                        case 35:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(35, 36);
                            break;
                        case 36:
                            if (curChar == 39 && kind > 44)
                                kind = 44;
                            break;
                        case 37:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(37, 38);
                            break;
                        case 38:
                            if (curChar == 39 && kind > 45)
                                kind = 45;
                            break;
                        case 39:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(39, 40);
                            break;
                        case 40:
                            if (curChar == 39 && kind > 46)
                                kind = 46;
                            break;
                        case 41:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(41, 42);
                            break;
                        case 42:
                            if (curChar == 39 && kind > 47)
                                kind = 47;
                            break;
                        case 43:
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(43, 44);
                            break;
                        case 44:
                            if (curChar == 39 && kind > 48)
                                kind = 48;
                            break;
                        case 45:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAddStates(0, 5);
                            break;
                        case 46:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(46);
                            break;
                        case 47:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                            jjCheckNAdd(47);
                            break;
                        case 48:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(48);
                            break;
                        case 49:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAdd(49);
                            break;
                        case 50:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(50);
                            break;
                        case 51:
                            if ((0xffffecfefffff9ffL & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(51);
                            break;
                        default :
                            break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 54:
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(31);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(30);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(29);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(28);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(27);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(26);
                            }
                            break;
                        case 8:
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(31);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(30);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(29);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(28);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(27);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(26);
                            }
                            if (curChar == 114)
                                jjstateSet[jjnewStateCnt++] = 7;
                            break;
                        case 52:
                            jjCheckNAddTwoStates(21, 22);
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            break;
                        case 53:
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            break;
                        case 9:
                            if ((0xd7ffffffd7ffffffL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAddStates(0, 5);
                            }
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAddStates(23, 28);
                            }
                            if (curChar == 102)
                                jjstateSet[jjnewStateCnt++] = 12;
                            else if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 2:
                            if (curChar == 101)
                                jjAddStates(29, 30);
                            break;
                        case 5:
                            if ((0x104000000000L & l) != 0L && kind > 39)
                                kind = 39;
                            break;
                        case 6:
                            if (curChar == 101 && kind > 41)
                                kind = 41;
                            break;
                        case 7:
                            if (curChar == 117)
                                jjCheckNAdd(6);
                            break;
                        case 10:
                            if (curChar == 115)
                                jjCheckNAdd(6);
                            break;
                        case 11:
                            if (curChar == 108)
                                jjstateSet[jjnewStateCnt++] = 10;
                            break;
                        case 12:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 11;
                            break;
                        case 13:
                            if (curChar == 102)
                                jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 21:
                            jjCheckNAddTwoStates(21, 22);
                            break;
                        case 25:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAddStates(23, 28);
                            break;
                        case 26:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(26);
                            break;
                        case 27:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                            jjCheckNAdd(27);
                            break;
                        case 28:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAdd(29);
                            break;
                        case 30:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(30);
                            break;
                        case 31:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(31);
                            break;
                        case 33:
                            jjAddStates(31, 32);
                            break;
                        case 35:
                            jjAddStates(33, 34);
                            break;
                        case 37:
                            jjAddStates(35, 36);
                            break;
                        case 39:
                            jjAddStates(37, 38);
                            break;
                        case 41:
                            jjAddStates(39, 40);
                            break;
                        case 43:
                            jjAddStates(41, 42);
                            break;
                        case 45:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAddStates(0, 5);
                            break;
                        case 46:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(46);
                            break;
                        case 47:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                            jjCheckNAdd(47);
                            break;
                        case 48:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(48);
                            break;
                        case 49:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAdd(49);
                            break;
                        case 50:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(50);
                            break;
                        case 51:
                            if ((0xd7ffffffd7ffffffL & l) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(51);
                            break;
                        default :
                            break;
                    }
                }
                while (i != startsAt);
            }
            else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop:
                do {
                    switch (jjstateSet[--i]) {
                        case 54:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            break;
                        case 8:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            break;
                        case 52:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjCheckNAddTwoStates(21, 22);
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            break;
                        case 53:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 43)
                                    kind = 43;
                                jjCheckNAdd(46);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 44)
                                    kind = 44;
                                jjCheckNAdd(47);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(48);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 46)
                                    kind = 46;
                                jjCheckNAdd(49);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAdd(50);
                            }
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                if (kind > 48)
                                    kind = 48;
                                jjCheckNAdd(51);
                            }
                            break;
                        case 9:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAddStates(0, 5);
                            break;
                        case 21:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjCheckNAddTwoStates(21, 22);
                            break;
                        case 33:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(31, 32);
                            break;
                        case 35:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(33, 34);
                            break;
                        case 37:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(35, 36);
                            break;
                        case 39:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(37, 38);
                            break;
                        case 41:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(39, 40);
                            break;
                        case 43:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(41, 42);
                            break;
                        case 46:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(46);
                            break;
                        case 47:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 44)
                                kind = 44;
                            jjCheckNAdd(47);
                            break;
                        case 48:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(48);
                            break;
                        case 49:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAdd(49);
                            break;
                        case 50:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(50);
                            break;
                        case 51:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 48)
                                kind = 48;
                            jjCheckNAdd(51);
                            break;
                        default :
                            break;
                    }
                }
                while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e) {
                return curPos;
            }
        }
    }


    static final int[] jjnextStates = {46, 47, 48, 49, 50, 51, 15, 16, 17, 19, 0, 33, 35, 37, 39, 41, 43, 1, 2, 5, 18, 2, 5, 26, 27, 28, 29, 30, 31, 3, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,};

    public static final String[] jjstrLiteralImages = {"", null, null, null, null, "\50", "\51", "\133", "\135", "\173", "\175", "\42", "\141\156\144", "\157\162", "\156\157\164", "\163\157\155\145", "\157\156\154\171", "\166\141\154\165\145", "\155\151\156", "\155\141\170", "\145\170\141\143\164\154\171", "\164\150\141\164", "\54", "\157", "\163\165\142\103\154\141\163\163\117\146", "\145\161\165\151\166\141\154\145\156\164\124\157", "\144\151\163\152\157\151\156\164\127\151\164\150", "\160\154\165\163", "\165\156\151\157\156", "\155\151\156\165\163", "\160\157\163\163\151\142\154\171", "\151\156\166", "\76", "\76\75", "\74", "\74\75", "\160\141\164\164\145\162\156", "\154\145\156\147\164\150", null, null, "\136\136", null, null, null, null, null, null, null, null, null, null,};

    public static final String[] lexStateNames = {"DEFAULT",};

    static final long[] jjtoToken = {0x7ffffffffffe1L,};

    static final long[] jjtoSkip = {0x1eL,};

    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[52];

    private final int[] jjstateSet = new int[104];

    StringBuffer image;

    int jjimageLen;

    int lengthOfMatch;

    protected char curChar;


    public ManchesterOWLParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }


    public ManchesterOWLParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }


    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }


    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 52; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }


    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }


    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }


    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }


    int curLexState = 0;

    int defaultLexState = 0;

    int jjnewStateCnt;

    int jjround;

    int jjmatchedPos;

    int jjmatchedKind;


    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100000400L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedPos == 0 && jjmatchedKind > 50) {
                jjmatchedKind = 50;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    TokenLexicalActions(matchedToken);
                    return matchedToken;
                }
                else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen,
                                    curLexState,
                                    error_line,
                                    error_column,
                                    error_after,
                                    curChar,
                                    TokenMgrError.LEXICAL_ERROR);
        }
    }


    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            case 43 :
                if (image == null)
                    image = new StringBuffer();
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                OWLEntity owlEntity = entityMapper.getOWLEntity(image.toString());
                if (owlEntity == null) {
                    // Could be a data type
                    URI dataTypeURI = dataTypeMapper.getOWLDataTypeURI(image.toString());
                    if (dataTypeURI != null) {
                        matchedToken.kind = ManchesterOWLParserConstants.DATATYPEID;
                    }
                }
                else {
                    owlEntity.accept(extractor);
                    matchedToken.kind = extractor.getKind();
                }
                break;
            default :
                break;
        }
    }
}
